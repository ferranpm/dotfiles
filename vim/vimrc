call plug#begin('~/.vim/bundle')
Plug 'srstevenson/vim-picker'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'w0rp/ale'
call plug#end()

runtime macros/matchit.vim

" important
set synmaxcol=255
set nocompatible

" moving around, searching and patterns
set path=,,
set incsearch
set ignorecase
set smartcase

" tags

" displaying text
set scrolloff=4
set nowrap
set showbreak=>
set lazyredraw
set list
set listchars=tab:»\ ,trail:·
set nowrap

" syntax, highlighting and spelling
set nohlsearch
set cursorline
set colorcolumn=128

" multiple windows
set laststatus=2
set statusline=%f%m\ %y%h%r%w\ (%l/%L,\ %c)\ %p%%\ %=%{fnamemodify(getcwd(),':t')}
set equalalways
set hidden
set switchbuf=useopen
set splitbelow
set splitright

" multiple tab pages

" terminal
set guicursor=a:block-Cursor-blinkon0,i-c-ci:ver20-Cursor-blinkon0,r-cr:hor20-Cursor-blinkon0
set titlestring=%{fnamemodify(getcwd(),':t')}

" using the mouse
set mouse=a

" printing

" messages and info
set shortmess=cITt
set showcmd
set showmode
set ruler
set confirm

" selecting text

" editing text
set undolevels=5000
set backspace=2
set completeopt=menuone,preview

" tabs and indenting
set tabstop=2
set shiftwidth=2
set smarttab
set expandtab
set autoindent
set smartindent

" folding
set foldlevel=99
set foldcolumn=0
set foldopen=hor,mark,percent,quickfix,tag,undo
set foldmethod=indent

" diff mode

" mapping
set timeoutlen=500
set ttimeoutlen=0

" reading and writing files
set modeline
set autoread
set nowritebackup
set nobackup

" the swap file
set noswapfile

" command line editing
set wildmode=list:longest,full
set wildignore=**/node_modules/**,*.cache,**/tmp/**,**/coverage/**,**/.git/**
set wildignorecase
set wildmenu
set undofile
set undodir=~/.vim/undodir
if !isdirectory(&undodir)
  call system('mkdir '.&undodir)
endif

" executing external commands

" running make and jumping to errors
if executable("ag")
  set grepprg=ag\ --vimgrep\ --nogroup\ --nocolor
  set grepformat=%f:%l:%c:%m
endif

" language specific
set isfname-==

" multi-byte characters

" various
set virtualedit=block
set exrc
set gdefault
set signcolumn=yes

" misc
let mapleader=' '
filetype plugin on
filetype indent on
syntax on

" Autocommands
augroup automaticquickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost    l* lwindow
augroup END

augroup quickfix
    autocmd!
    autocmd FileType qf set nobuflisted
augroup END

command! -nargs=? UnderscoreToUpperCamelCase <args>s#\m\(\%(\<\l\+\)\%(_\)\@=\)\|_\(\l\)#\u\1\2
command! -nargs=? UnderscoreToLowerCamelCase <args>s#\m_\(\l\)#\u\1
command! -nargs=? CamelCaseToUnderscore <args>s#\m\C\(\<\u[a-z0-9]\+\|[a-z0-9]\+\)\(\u\)#\l\1_\l\2
command! -nargs=0 QuickfixToArgs call edit#quickfix_to_args()
command! -nargs=1 -range Align '<,'>call edit#align(<f-args>)
command! -nargs=0 Reg call edit#reg()

" Mappings
cnoremap <c-p> <up>
cnoremap <c-n> <down>
cnoremap <up> <c-p>
cnoremap <down> <c-n>

noremap ; :
noremap : ;

noremap ` '
noremap ' `

inoremap <s-cr> <esc>O
inoremap <c-cr> <esc>o

inoremap <c-j> <esc>viwA<c-x><c-u>

nnoremap <silent> ]q :cnext<cr>
nnoremap <silent> [q :cprevious<cr>

nnoremap <silent> ]t :tnext<cr>
nnoremap <silent> [t :tprevious<cr>

nnoremap <silent> ]l :lnext<cr>
nnoremap <silent> [l :lprevious<cr>

noremap <silent> ]g /\v^(\<\|\=\|\>){7}([^=].+)?$<cr>
noremap <silent> [g ?\v^(\<\|\=\|\>){7}([^=].+)\?$<cr>

vnoremap * y/<c-r>=escape('<c-r>0', '*/\[].')<cr><cr>

vnoremap > >gv
vnoremap < <gv

nnoremap Y y$
nnoremap - ^

nnoremap <c-h> <c-w><c-h>
nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-l> <c-w><c-l>

nnoremap ,S :%s/\C\<<c-r>=expand('<cword>')<cr>\>/
nnoremap ,s :s/\C\<<c-r>=expand('<cword>')<cr>\>/
vnoremap ,S y:%s/\C<c-r>=escape('<c-r>0', '*/\[].~')<cr>/
vnoremap ,s y:s/\C<c-r>=escape('<c-r>0', '*/\[].~')<cr>/

nnoremap ,g :g/\C\<<c-r>=expand('<cword>')<cr>\>/
nnoremap ,v :v/\C\<<c-r>=expand('<cword>')<cr>\>/
vnoremap ,g y:g/\C<c-r>=escape('<c-r>0', '*/\[].~')<cr>/
vnoremap ,v y:v/\C<c-r>=escape('<c-r>0', '*/\[].~')<cr>/

vnoremap ,r :s/\%V

nnoremap <f2> :setlocal cursorline! cursorline?<cr>
nnoremap <f3> :setlocal hlsearch! hlsearch?<cr>
nnoremap <f4> :setlocal spell! spell?<cr>
nnoremap <f8> :setlocal wrap! wrap?<cr>

nnoremap <c-p> :ls<cr>:buffer 
nnoremap <c-q> :find 

nnoremap <silent> <leader>bc :let @*=expand("%")<cr>
nnoremap <silent> <leader>lo :!open <cWORD> &<cr>
nnoremap <silent> <leader>zs :%s/\s\+$//<cr>
vnoremap <silent> <leader>zs :s/\s\+$//<cr>
nnoremap <silent> <leader>h :setlocal hlsearch! hlsearch?<cr>
nnoremap          <leader>s "_ddP
nnoremap <silent> <leader>zh :call edit#auto_highlight_toggle()<cr>
nnoremap          <leader>zv zMzvzz
nnoremap          <leader>e :e <c-r>=expand("%:h")<cr>/
nnoremap <silent> <leader>n :e ~/Notes/sequra/inbox.md<cr>

let silent = has('gui_running') ? 'silent ' : ''
execute 'nnoremap <leader>u :'.silent.'grep! "\b<c-r>=expand("<cword>")<cr>\b"'
execute 'nnoremap <leader>U :'.silent.'grep! "\b<c-r>=expand("<cWORD>")<cr>\b"'
execute 'vnoremap <leader>u y:'.silent.'grep! --case-sensitive --literal "\b<c-r>0\b"'
execute 'nnoremap <leader>g :'.silent.'grep! ""<left>'
execute 'vnoremap <leader>g y:'.silent.'grep! "<c-r>0"<left>'

if has('clipboard')
  nnoremap <c-c> "+yy
  vnoremap <c-c> "+y
end
nnoremap <silent> <c-s> :update<cr>

noremap <silent> <c-s-tab> :bprevious<cr>
noremap <silent> <c-tab> :bnext<cr>
noremap <silent> <c-pageup> :tabprevious<cr>
noremap <silent> <c-pagedown> :tabnext<cr>
nnoremap <leader>lp o<c-r>"<esc>
nnoremap <leader>lP O<c-r>"<esc>

cnoremap <C-A> <Home>

if exists(':terminal')
  tnoremap <c-h> <c-w>h
  tnoremap <c-j> <c-w>j
  tnoremap <c-k> <c-w>k
  tnoremap <c-l> <c-w>l
  tnoremap <c-^> <c-\><c-n><c-^>
  tnoremap <c-u> <c-\><c-n><c-u>
endif

colorscheme monochrome
