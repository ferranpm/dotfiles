snippet fori
for (var ${1:i} = 0; $1 < ${2:count}; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet fora
for (var i in ${1:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet foreach
${1:array}.forEach(function(item, i, array) {
	${0:${VISUAL}}
});
endsnippet

snippet cl
console.log(${1:${VISUAL}});${0}
endsnippet

snippet clui
console.log(util.inspect(${1:${VISUAL:object}}, { depth: null }));
endsnippet

snippet clstr
console.log(JSON.stringify(${1:${VISUAL:object}}, null, 2));
endsnippet

snippet proto
${1:Object}.prototype.${2:name} = function(${3}) {
	${0:${VISUAL}}
}
endsnippet

snippet f
function(${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet fun
function ${1:name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

snippet l
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet amap
async.map(${1:collection}, (value, callback) => {
	${0:${VISUAL}}
	callback(null, value);
}, (error, results) => {
});
endsnippet

snippet afilter
async.filter(${1:collection}, (value, callback) => {
	${0:${VISUAL}}
	callback(true);
}, (results) => {
});
endsnippet

snippet aeach
async.each(${1:collection}, (value, callback) => {
	${0:${VISUAL}}
	callback(null);
}, (error) => {
});
endsnippet

snippet awaterfall
async.waterfall([
	function(next) {
		${0:${VISUAL}}
	}
], (error) => {
});
endsnippet

snippet areduce
async.reduce(${1:collection}, ${2:initial}, (memo, value, callback) => {
	${0:${VISUAL}}
}, (error, result) => {
});
endsnippet

snippet if
if (${1:condition}) {
	${0:${VISUAL}}
}
endsnippet
