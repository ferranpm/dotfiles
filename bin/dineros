#!/usr/bin/env ruby

require 'nokogiri'
require 'date'
require 'optparse'

PARTICIPANTS = 4.freeze
Transaction = Struct.new(:date, :concept, :amount, :balance)

class SantanderFile
  def initialize(file)
    @page = Nokogiri::XML(File.read(File.expand_path(file)))
  end
  attr_reader :page

  def transactions
    rows
      .reject { |tr| tr.css('#TDListadoBorderBottom').empty? }
      .map { |tr| tr.css('font').map(&:text).map(&:strip) }
      .map { |font| build_transaction(font) }
  end

  private

  def rows
    table.css('tr')
  end

  def table
    page.css('table')
  end

  def build_transaction(font)
    date, _other_date, concept, amount, balance, rest = font
    raise 'Unexpected extra column' unless rest.nil?
    Transaction.new(
      Date.parse(date),
      concept.force_encoding(Encoding::ISO_8859_1).encode(Encoding::UTF_8),
      amount.delete('.').tr(',', '.').to_f,
      balance.delete('.').tr(',', '.').to_f
    )
  end
end

def despeses(transactions)
  transactions.sort_by(&:amount).each do |t|
    puts "#{t.concept};#{t.date};#{t.amount}"
  end
end


def rebuts(transactions)
  sum = transactions.sum do |transaction|
    if /^RECIBO(?! PayPal)/.match(transaction.concept) then
      puts "#{transaction.amount}\t(#{transaction.concept})"
      transaction.amount
    else
      0
    end
  end
  puts "total:\t#{sum}"
  puts "p.p:\t#{sum/PARTICIPANTS}"
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: dineros [options] file..."

  opts.on("-r", "--rebuts", "Veure els rebuts") { |r| options[:rebuts] = r }
  opts.on("-d", "--despeses", "Veure les despeses") { |d| options[:despeses] = d }
end.parse!

ARGV.each do |file|
  transactions = SantanderFile.new(file).transactions
  if options[:rebuts]
    rebuts(transactions)
  else
    despeses(transactions)
  end
end
